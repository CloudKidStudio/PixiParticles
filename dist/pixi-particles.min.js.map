{"version":3,"sources":["node_modules/browser-pack/_prelude.js","ts-dist/AnimatedParticle.js","ts-dist/Emitter.js","ts-dist/Particle.js","ts-dist/ParticleUtils.js","ts-dist/PathParticle.js","ts-dist/PropertyList.js","ts-dist/PropertyNode.js","ts-dist/particles.js","ts-dist"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixiParticles","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","Particle_1","Texture","PIXI","AnimatedParticle","_super","emitter","_this","textures","duration","framerate","elapsed","loop","init","Particle_init","maxLife","applyArt","art","update","delta","lerp","Particle_update","frame","texture","EMPTY","destroy","Particle_destroy","parseArt","data","output","tex","outTextures","outArr","j","push","fromImage","dupe","count","default","ParticleUtils_1","PropertyNode_1","ticker","shared","helperPoint","Point","Emitter","particleParent","particleImages","config","_particleConstructor","startAlpha","startSpeed","minimumSpeedMultiplier","acceleration","maxSpeed","NaN","startScale","minimumScaleMultiplier","startColor","minLifetime","maxLifetime","minStartRotation","maxStartRotation","noRotation","minRotationSpeed","maxRotationSpeed","particleBlendMode","customEase","extraData","_frequency","spawnChance","maxParticles","emitterLifetime","spawnPos","spawnType","_spawnFunc","spawnRect","spawnCircle","particlesPerWave","particleSpacing","angleStart","rotation","ownerPos","_prevEmitterPos","_prevPosIsValid","_posChanged","_parent","addAtBack","particleCount","_emit","_spawnTimer","_emitterLife","_activeParticlesFirst","_activeParticlesLast","_poolFirst","_origConfig","_origArt","_autoUpdate","_destroyWhenComplete","_completeCallback","parent","recycle","rotate","updateSpawnPos","updateOwnerPos","get","set","enumerable","configurable","cleanup","particle","next","isArray","slice","partClass","alpha","createList","speed","x","y","scale","color","startRotation","min","max","rotationSpeed","lifetime","getBlendMode","blendMode","ease","generateEase","parseData","_spawnRect","Rectangle","w","h","_spawnCircle","Circle","_spawnRing","minRadius","minR","_spawnBurst","_spawnPoint","frequency","pos","clone","emit","undefined","autoUpdate","prev","removeChild","newRot","diff","rotatePoint","resetPositionTracking","remove","add","playOnceAndDestroy","callback","playOnce","settings","TARGET_FPMS","prevX","prevY","curX","curY","Math","random","emitPosX","emitPosY","len","particleConstructor","floor","alphaList","reset","speedMultiplier","speedList","scaleMultiplier","scaleList","colorList","children","shift","pop","index","indexOf","splice","unshift","addChildAt","addChild","position","width","height","radius","angle","PropertyList_1","Sprite","Particle","anchor","velocity","age","_doAlpha","_doScale","_doSpeed","_doAcceleration","_doColor","_doNormalMovement","_oneOverLife","Sprite_destroy","kill","current","DEG_TO_RADS","tint","combineRGBComponents","visible","interpolate","normalize","scaleBy","currentSpeed","atan2","verbose","baseTexture","console","warn","BLEND_MODES","ParticleUtils","PI","s","sin","cos","xnew","ynew","point","oneOverLen","sqrt","hexToRGB","charAt","substr","parseInt","segments","qty","oneOverQty","time","cp","name","NORMAL","toUpperCase","replace","createSteppedGradient","list","numSteps","first","isStepped","currentNode","nextIndex","curVal","nextVal","MATH_FUNCS","WHITELISTER","RegExp","concat","join","parsePath","pathString","matches","match","Function","PathParticle","path","initialRotation","initialPosition","movement","error","randomize","node","arrayValue","intValueSimple","intColorSimple","intValueComplex","intColorComplex","intValueStepped","intColorStepped","PropertyList","isColor","PropertyNode","map","v","array","start","end","ParticleUtils_js_1","Particle_js_1","Emitter_js_1","PathParticle_js_1","AnimatedParticle_js_1","particles","prop"],"mappings":"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","file":"pixi-particles.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Particle_1 = require(\"./Particle\");\nvar Texture = PIXI.Texture;\n/**\n * An individual particle image with an animation. Art data passed to the emitter must be\n * formatted in a particular way for AnimatedParticle to be able to handle it:\n *\n *     {\n *         //framerate is required. It is the animation speed of the particle in frames per\n *         //second.\n *         //A value of \"matchLife\" causes the animation to match the lifetime of an individual\n *         //particle, instead of at a constant framerate. This causes the animation to play\n *         //through one time, completing when the particle expires.\n *         framerate: 6,\n *         //loop is optional, and defaults to false.\n *         loop: true,\n *         //textures is required, and can be an array of any (non-zero) length.\n *         textures: [\n *             //each entry represents a single texture that should be used for one or more\n *             //frames. Any strings will be converted to Textures with Texture.fromImage().\n *             //Instances of PIXI.Texture will be used directly.\n *             \"animFrame1.png\",\n *             //entries can be an object with a 'count' property, telling AnimatedParticle to\n *             //use that texture for 'count' frames sequentially.\n *             {\n *                 texture: \"animFrame2.png\",\n *                 count: 3\n *             },\n *             \"animFrame3.png\"\n *         ]\n *     }\n *\n * @memberof PIXI.particles\n * @class AnimatedParticle\n * @extends PIXI.particles.Particle\n * @constructor\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this AnimatedParticle.\n */\nvar AnimatedParticle = /** @class */ (function (_super) {\n    __extends(AnimatedParticle, _super);\n    function AnimatedParticle(emitter) {\n        var _this = _super.call(this, emitter) || this;\n        _this.textures = null;\n        _this.duration = 0;\n        _this.framerate = 0;\n        _this.elapsed = 0;\n        _this.loop = false;\n        return _this;\n    }\n    /**\n     * Initializes the particle for use, based on the properties that have to\n     * have been set already on the particle.\n     * @method PIXI.particles.AnimatedParticle#init\n     */\n    AnimatedParticle.prototype.init = function () {\n        this.Particle_init();\n        this.elapsed = 0;\n        //if the animation needs to match the particle's life, then cacluate variables\n        if (this.framerate < 0) {\n            this.duration = this.maxLife;\n            this.framerate = this.textures.length / this.duration;\n        }\n    };\n    /**\n     * Sets the textures for the particle.\n     * @method PIXI.particles.AnimatedParticle#applyArt\n     * @param {Array} art An array of PIXI.Texture objects for this animated particle.\n     */\n    AnimatedParticle.prototype.applyArt = function (art) {\n        this.textures = art.textures;\n        this.framerate = art.framerate;\n        this.duration = art.duration;\n        this.loop = art.loop;\n    };\n    /**\n     * Updates the particle.\n     * @method PIXI.particles.AnimatedParticle#update\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\n     */\n    AnimatedParticle.prototype.update = function (delta) {\n        var lerp = this.Particle_update(delta);\n        //only animate the particle if it is still alive\n        if (lerp >= 0) {\n            this.elapsed += delta;\n            if (this.elapsed > this.duration) {\n                //loop elapsed back around\n                if (this.loop)\n                    this.elapsed = this.elapsed % this.duration;\n                //subtract a small amount to prevent attempting to go past the end of the animation\n                else\n                    this.elapsed = this.duration - 0.000001;\n            }\n            var frame = (this.elapsed * this.framerate + 0.0000001) | 0;\n            this.texture = this.textures[frame] || PIXI.Texture.EMPTY;\n        }\n        return lerp;\n    };\n    /**\n     * Destroys the particle, removing references and preventing future use.\n     * @method PIXI.particles.AnimatedParticle#destroy\n     */\n    AnimatedParticle.prototype.destroy = function () {\n        this.Particle_destroy();\n        this.textures = null;\n    };\n    /**\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\n     * modifications to prepare it ahead of time.\n     * @method PIXI.particles.AnimatedParticle.parseArt\n     * @static\n     * @param  {Array} art The array of art data, properly formatted for AnimatedParticle.\n     * @return {Array} The art, after any needed modifications.\n     */\n    AnimatedParticle.parseArt = function (art) {\n        var data, output, textures, tex, outTextures;\n        var outArr = [];\n        for (var i = 0; i < art.length; ++i) {\n            data = art[i];\n            outArr[i] = output = {};\n            output.textures = outTextures = [];\n            textures = data.textures;\n            for (var j = 0; j < textures.length; ++j) {\n                tex = textures[j];\n                if (typeof tex == \"string\")\n                    outTextures.push(Texture.fromImage(tex));\n                else if (tex instanceof Texture)\n                    outTextures.push(tex);\n                //assume an object with extra data determining duplicate frame data\n                else {\n                    var dupe = tex.count || 1;\n                    if (typeof tex.texture == \"string\")\n                        tex = Texture.fromImage(tex.texture);\n                    else // if(tex.texture instanceof Texture)\n                        tex = tex.texture;\n                    for (; dupe > 0; --dupe) {\n                        outTextures.push(tex);\n                    }\n                }\n            }\n            //use these values to signify that the animation should match the particle life time.\n            if (data.framerate == \"matchLife\") {\n                //-1 means that it should be calculated\n                output.framerate = -1;\n                output.duration = 0;\n                output.loop = false;\n            }\n            else {\n                //determine if the animation should loop\n                output.loop = !!data.loop;\n                //get the framerate, default to 60\n                output.framerate = data.framerate > 0 ? data.framerate : 60;\n                //determine the duration\n                output.duration = outTextures.length / output.framerate;\n            }\n        }\n        return outArr;\n    };\n    return AnimatedParticle;\n}(Particle_1.default));\nexports.default = AnimatedParticle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\nvar Particle_1 = require(\"./Particle\");\nvar PropertyNode_1 = require(\"./PropertyNode\");\nvar ticker = PIXI.ticker.shared;\nvar helperPoint = new PIXI.Point();\n/**\n * A particle emitter.\n * @memberof PIXI.particles\n * @class Emitter\n * @constructor\n * @param {PIXI.Container} particleParent The container to add the\n *                                                     particles to.\n * @param {Array|PIXI.Texture|String} [particleImages] A texture or array of textures to use\n *                                                     for the particles. Strings will be turned\n *                                                     into textures via Texture.fromImage().\n * @param {Object} [config] A configuration object containing settings for the emitter.\n * @param {Boolean} [config.emit=true] If config.emit is explicitly passed as false, the Emitter\n *                                     will start disabled.\n * @param {Boolean} [config.autoUpdate=false] If config.emit is explicitly passed as true, the Emitter\n *                                     will automatically call update via the PIXI shared ticker.\n */\nvar Emitter = /** @class */ (function () {\n    function Emitter(particleParent, particleImages, config) {\n        this._particleConstructor = Particle_1.default;\n        //properties for individual particles\n        this.particleImages = null;\n        this.startAlpha = null;\n        this.startSpeed = null;\n        this.minimumSpeedMultiplier = 1;\n        this.acceleration = null;\n        this.maxSpeed = NaN;\n        this.startScale = null;\n        this.minimumScaleMultiplier = 1;\n        this.startColor = null;\n        this.minLifetime = 0;\n        this.maxLifetime = 0;\n        this.minStartRotation = 0;\n        this.maxStartRotation = 0;\n        this.noRotation = false;\n        this.minRotationSpeed = 0;\n        this.maxRotationSpeed = 0;\n        this.particleBlendMode = 0;\n        this.customEase = null;\n        this.extraData = null;\n        //properties for spawning particles\n        this._frequency = 1;\n        this.spawnChance = 1;\n        this.maxParticles = 1000;\n        this.emitterLifetime = -1;\n        this.spawnPos = null;\n        this.spawnType = null;\n        this._spawnFunc = null;\n        this.spawnRect = null;\n        this.spawnCircle = null;\n        this.particlesPerWave = 1;\n        this.particleSpacing = 0;\n        this.angleStart = 0;\n        //emitter properties\n        this.rotation = 0;\n        this.ownerPos = null;\n        this._prevEmitterPos = null;\n        this._prevPosIsValid = false;\n        this._posChanged = false;\n        this._parent = null;\n        this.addAtBack = false;\n        this.particleCount = 0;\n        this._emit = false;\n        this._spawnTimer = 0;\n        this._emitterLife = -1;\n        this._activeParticlesFirst = null;\n        this._activeParticlesLast = null;\n        this._poolFirst = null;\n        this._origConfig = null;\n        this._origArt = null;\n        this._autoUpdate = false;\n        this._destroyWhenComplete = false;\n        this._completeCallback = null;\n        //set the initial parent\n        this.parent = particleParent;\n        if (particleImages && config)\n            this.init(particleImages, config);\n        //save often used functions on the instance instead of the prototype for better speed\n        this.recycle = this.recycle;\n        this.update = this.update;\n        this.rotate = this.rotate;\n        this.updateSpawnPos = this.updateSpawnPos;\n        this.updateOwnerPos = this.updateOwnerPos;\n    }\n    Object.defineProperty(Emitter.prototype, \"frequency\", {\n        /**\n         * Time between particle spawns in seconds. If this value is not a number greater than 0,\n         * it will be set to 1 (particle per second) to prevent infinite loops.\n         * @member {Number} PIXI.particles.Emitter#frequency\n         */\n        get: function () { return this._frequency; },\n        set: function (value) {\n            //do some error checking to prevent infinite loops\n            if (typeof value == \"number\" && value > 0)\n                this._frequency = value;\n            else\n                this._frequency = 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Emitter.prototype, \"particleConstructor\", {\n        /**\n         * The constructor used to create new particles. The default is\n         * the built in Particle class. Setting this will dump any active or\n         * pooled particles, if the emitter has already been used.\n         * @member {Function} PIXI.particles.Emitter#particleConstructor\n         */\n        get: function () { return this._particleConstructor; },\n        set: function (value) {\n            if (value != this._particleConstructor) {\n                this._particleConstructor = value;\n                //clean up existing particles\n                this.cleanup();\n                //scrap all the particles\n                for (var particle = this._poolFirst; particle; particle = particle.next) {\n                    particle.destroy();\n                }\n                this._poolFirst = null;\n                //re-initialize the emitter so that the new constructor can do anything it needs to\n                if (this._origConfig && this._origArt)\n                    this.init(this._origArt, this._origConfig);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Emitter.prototype, \"parent\", {\n        /**\n        * The container to add particles to. Settings this will dump any active particles.\n        * @member {PIXI.Container} PIXI.particles.Emitter#parent\n        */\n        get: function () { return this._parent; },\n        set: function (value) {\n            this.cleanup();\n            this._parent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets up the emitter based on the config settings.\n     * @method PIXI.particles.Emitter#init\n     * @param {Array|PIXI.Texture} art A texture or array of textures to use for the particles.\n     * @param {Object} config A configuration object containing settings for the emitter.\n     */\n    Emitter.prototype.init = function (art, config) {\n        if (!art || !config)\n            return;\n        //clean up any existing particles\n        this.cleanup();\n        //store the original config and particle images, in case we need to re-initialize\n        //when the particle constructor is changed\n        this._origConfig = config;\n        this._origArt = art;\n        //set up the array of data, also ensuring that it is an array\n        art = Array.isArray(art) ? art.slice() : [art];\n        //run the art through the particle class's parsing function\n        var partClass = this._particleConstructor;\n        this.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\n        ///////////////////////////\n        // Particle Properties   //\n        ///////////////////////////\n        //set up the alpha\n        if (config.alpha) {\n            this.startAlpha = PropertyNode_1.default.createList(config.alpha);\n        }\n        else\n            this.startAlpha = new PropertyNode_1.default(1, 0);\n        //set up the speed\n        if (config.speed) {\n            this.startSpeed = PropertyNode_1.default.createList(config.speed);\n            this.minimumSpeedMultiplier = config.speed.minimumSpeedMultiplier || 1;\n        }\n        else {\n            this.minimumSpeedMultiplier = 1;\n            this.startSpeed = new PropertyNode_1.default(0, 0);\n        }\n        //set up acceleration\n        var acceleration = config.acceleration;\n        if (acceleration && (acceleration.x || acceleration.y)) {\n            //make sure we disable speed interpolation\n            this.startSpeed.next = null;\n            this.acceleration = new PIXI.Point(acceleration.x, acceleration.y);\n            this.maxSpeed = config.maxSpeed || NaN;\n        }\n        else\n            this.acceleration = new PIXI.Point();\n        //set up the scale\n        if (config.scale) {\n            this.startScale = PropertyNode_1.default.createList(config.scale);\n            this.minimumScaleMultiplier = config.scale.minimumScaleMultiplier || 1;\n        }\n        else {\n            this.startScale = new PropertyNode_1.default(1, 0);\n            this.minimumScaleMultiplier = 1;\n        }\n        //set up the color\n        if (config.color) {\n            this.startColor = PropertyNode_1.default.createList(config.color);\n        }\n        else {\n            this.startColor = new PropertyNode_1.default({ r: 0xFF, g: 0xFF, b: 0xFF }, 0);\n        }\n        //set up the start rotation\n        if (config.startRotation) {\n            this.minStartRotation = config.startRotation.min;\n            this.maxStartRotation = config.startRotation.max;\n        }\n        else\n            this.minStartRotation = this.maxStartRotation = 0;\n        if (config.noRotation &&\n            (this.minStartRotation || this.maxStartRotation)) {\n            this.noRotation = !!config.noRotation;\n        }\n        else\n            this.noRotation = false;\n        //set up the rotation speed\n        if (config.rotationSpeed) {\n            this.minRotationSpeed = config.rotationSpeed.min;\n            this.maxRotationSpeed = config.rotationSpeed.max;\n        }\n        else\n            this.minRotationSpeed = this.maxRotationSpeed = 0;\n        //set up the lifetime\n        this.minLifetime = config.lifetime.min;\n        this.maxLifetime = config.lifetime.max;\n        //get the blend mode\n        this.particleBlendMode = ParticleUtils_1.default.getBlendMode(config.blendMode);\n        //use the custom ease if provided\n        if (config.ease) {\n            this.customEase = typeof config.ease == \"function\" ?\n                config.ease :\n                ParticleUtils_1.default.generateEase(config.ease);\n        }\n        else\n            this.customEase = null;\n        //set up the extra data, running it through the particle class's parseData function.\n        if (partClass.parseData)\n            this.extraData = partClass.parseData(config.extraData);\n        else\n            this.extraData = config.extraData || null;\n        //////////////////////////\n        // Emitter Properties   //\n        //////////////////////////\n        //reset spawn type specific settings\n        this.spawnRect = this.spawnCircle = null;\n        this.particlesPerWave = 1;\n        if (config.particlesPerWave && config.particlesPerWave > 1)\n            this.particlesPerWave = config.particlesPerWave;\n        this.particleSpacing = 0;\n        this.angleStart = 0;\n        var spawnCircle;\n        //determine the spawn function to use\n        switch (config.spawnType) {\n            case \"rect\":\n                this.spawnType = \"rect\";\n                this._spawnFunc = this._spawnRect;\n                var spawnRect = config.spawnRect;\n                this.spawnRect = new PIXI.Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\n                break;\n            case \"circle\":\n                this.spawnType = \"circle\";\n                this._spawnFunc = this._spawnCircle;\n                spawnCircle = config.spawnCircle;\n                this.spawnCircle = new PIXI.Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r);\n                break;\n            case \"ring\":\n                this.spawnType = \"ring\";\n                this._spawnFunc = this._spawnRing;\n                spawnCircle = config.spawnCircle;\n                this.spawnCircle = new PIXI.Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r);\n                this.spawnCircle.minRadius = spawnCircle.minR;\n                break;\n            case \"burst\":\n                this.spawnType = \"burst\";\n                this._spawnFunc = this._spawnBurst;\n                this.particleSpacing = config.particleSpacing;\n                this.angleStart = config.angleStart ? config.angleStart : 0;\n                break;\n            case \"point\":\n                this.spawnType = \"point\";\n                this._spawnFunc = this._spawnPoint;\n                break;\n            default:\n                this.spawnType = \"point\";\n                this._spawnFunc = this._spawnPoint;\n                break;\n        }\n        //set the spawning frequency\n        this.frequency = config.frequency;\n        this.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\n        //set the emitter lifetime\n        this.emitterLifetime = config.emitterLifetime || -1;\n        //set the max particles\n        this.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\n        //determine if we should add the particle at the back of the list or not\n        this.addAtBack = !!config.addAtBack;\n        //reset the emitter position and rotation variables\n        this.rotation = 0;\n        this.ownerPos = new PIXI.Point();\n        this.spawnPos = new PIXI.Point(config.pos.x, config.pos.y);\n        this._prevEmitterPos = this.spawnPos.clone();\n        //previous emitter position is invalid and should not be used for interpolation\n        this._prevPosIsValid = false;\n        //start emitting\n        this._spawnTimer = 0;\n        this.emit = config.emit === undefined ? true : !!config.emit;\n        this.autoUpdate = config.autoUpdate === undefined ? false : !!config.autoUpdate;\n    };\n    /**\n     * Recycles an individual particle.\n     * @method PIXI.particles.Emitter#recycle\n     * @param {Particle} particle The particle to recycle.\n     * @private\n     */\n    Emitter.prototype.recycle = function (particle) {\n        if (particle.next)\n            particle.next.prev = particle.prev;\n        if (particle.prev)\n            particle.prev.next = particle.next;\n        if (particle == this._activeParticlesLast)\n            this._activeParticlesLast = particle.prev;\n        if (particle == this._activeParticlesFirst)\n            this._activeParticlesFirst = particle.next;\n        //add to pool\n        particle.prev = null;\n        particle.next = this._poolFirst;\n        this._poolFirst = particle;\n        //remove child from display, or make it invisible if it is in a ParticleContainer\n        if (particle.parent)\n            particle.parent.removeChild(particle);\n        //decrease count\n        --this.particleCount;\n    };\n    /**\n     * Sets the rotation of the emitter to a new value.\n     * @method PIXI.particles.Emitter#rotate\n     * @param {Number} newRot The new rotation, in degrees.\n     */\n    Emitter.prototype.rotate = function (newRot) {\n        if (this.rotation == newRot)\n            return;\n        //caclulate the difference in rotation for rotating spawnPos\n        var diff = newRot - this.rotation;\n        this.rotation = newRot;\n        //rotate spawnPos\n        ParticleUtils_1.default.rotatePoint(diff, this.spawnPos);\n        //mark the position as having changed\n        this._posChanged = true;\n    };\n    /**\n     * Changes the spawn position of the emitter.\n     * @method PIXI.particles.Emitter#updateSpawnPos\n     * @param {Number} x The new x value of the spawn position for the emitter.\n     * @param {Number} y The new y value of the spawn position for the emitter.\n     */\n    Emitter.prototype.updateSpawnPos = function (x, y) {\n        this._posChanged = true;\n        this.spawnPos.x = x;\n        this.spawnPos.y = y;\n    };\n    /**\n     * Changes the position of the emitter's owner. You should call this if you are adding\n     * particles to the world container that your emitter's owner is moving around in.\n     * @method PIXI.particles.Emitter#updateOwnerPos\n     * @param {Number} x The new x value of the emitter's owner.\n     * @param {Number} y The new y value of the emitter's owner.\n     */\n    Emitter.prototype.updateOwnerPos = function (x, y) {\n        this._posChanged = true;\n        this.ownerPos.x = x;\n        this.ownerPos.y = y;\n    };\n    /**\n     * Prevents emitter position interpolation in the next update.\n     * This should be used if you made a major position change of your emitter's owner\n     * that was not normal movement.\n     * @method PIXI.particles.Emitter#resetPositionTracking\n     */\n    Emitter.prototype.resetPositionTracking = function () {\n        this._prevPosIsValid = false;\n    };\n    Object.defineProperty(Emitter.prototype, \"emit\", {\n        /**\n         * If particles should be emitted during update() calls. Setting this to false\n         * stops new particles from being created, but allows existing ones to die out.\n         * @member {Boolean} PIXI.particles.Emitter#emit\n         */\n        get: function () { return this._emit; },\n        set: function (value) {\n            this._emit = !!value;\n            this._emitterLife = this.emitterLifetime;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    Object.defineProperty(Emitter.prototype, \"autoUpdate\", {\n        /**\n         * If the update function is called automatically from the shared ticker.\n         * Setting this to false requires calling the update function manually.\n         * @member {Boolean} PIXI.particles.Emitter#autoUpdate\n         */\n        get: function () { return this._autoUpdate; },\n        set: function (value) {\n            if (this._autoUpdate && !value) {\n                ticker.remove(this.update, this);\n            }\n            else if (!this._autoUpdate && value) {\n                ticker.add(this.update, this);\n            }\n            this._autoUpdate = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\n     * when particle emission is complete.\n     * @method PIXI.particles.Emitter#playOnceAndDestroy\n     * @param {Function} [callback] Callback for when emission is complete (all particles have died off)\n     */\n    Emitter.prototype.playOnceAndDestroy = function (callback) {\n        this.autoUpdate = true;\n        this.emit = true;\n        this._destroyWhenComplete = true;\n        this._completeCallback = callback;\n    };\n    /**\n     * Starts emitting particles and optionally calls a callback when particle emission is complete.\n     * @method PIXI.particles.Emitter#playOnce\n     * @param {Function} [callback] Callback for when emission is complete (all particles have died off)\n     */\n    Emitter.prototype.playOnce = function (callback) {\n        this.emit = true;\n        this._completeCallback = callback;\n    };\n    /**\n     * Updates all particles spawned by this emitter and emits new ones.\n     * @method PIXI.particles.Emitter#update\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\n     */\n    Emitter.prototype.update = function (delta) {\n        if (this._autoUpdate) {\n            delta = delta / PIXI.settings.TARGET_FPMS / 1000;\n        }\n        //if we don't have a parent to add particles to, then don't do anything.\n        //this also works as a isDestroyed check\n        if (!this._parent)\n            return;\n        //update existing particles\n        var i, particle, next;\n        for (particle = this._activeParticlesFirst; particle; particle = next) {\n            next = particle.next;\n            particle.update(delta);\n        }\n        var prevX, prevY;\n        //if the previous position is valid, store these for later interpolation\n        if (this._prevPosIsValid) {\n            prevX = this._prevEmitterPos.x;\n            prevY = this._prevEmitterPos.y;\n        }\n        //store current position of the emitter as local variables\n        var curX = this.ownerPos.x + this.spawnPos.x;\n        var curY = this.ownerPos.y + this.spawnPos.y;\n        //spawn new particles\n        if (this._emit) {\n            //decrease spawn timer\n            this._spawnTimer -= delta;\n            //while _spawnTimer < 0, we have particles to spawn\n            while (this._spawnTimer <= 0) {\n                //determine if the emitter should stop spawning\n                if (this._emitterLife > 0) {\n                    this._emitterLife -= this._frequency;\n                    if (this._emitterLife <= 0) {\n                        this._spawnTimer = 0;\n                        this._emitterLife = 0;\n                        this.emit = false;\n                        break;\n                    }\n                }\n                //determine if we have hit the particle limit\n                if (this.particleCount >= this.maxParticles) {\n                    this._spawnTimer += this._frequency;\n                    continue;\n                }\n                //determine the particle lifetime\n                var lifetime = void 0;\n                if (this.minLifetime == this.maxLifetime)\n                    lifetime = this.minLifetime;\n                else\n                    lifetime = Math.random() * (this.maxLifetime - this.minLifetime) + this.minLifetime;\n                //only make the particle if it wouldn't immediately destroy itself\n                if (-this._spawnTimer < lifetime) {\n                    //If the position has changed and this isn't the first spawn,\n                    //interpolate the spawn position\n                    var emitPosX = void 0, emitPosY = void 0;\n                    if (this._prevPosIsValid && this._posChanged) {\n                        //1 - _spawnTimer / delta, but _spawnTimer is negative\n                        var lerp = 1 + this._spawnTimer / delta;\n                        emitPosX = (curX - prevX) * lerp + prevX;\n                        emitPosY = (curY - prevY) * lerp + prevY;\n                    }\n                    else //otherwise just set to the spawn position\n                     {\n                        emitPosX = curX;\n                        emitPosY = curY;\n                    }\n                    //create enough particles to fill the wave (non-burst types have a wave of 1)\n                    i = 0;\n                    for (var len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i) {\n                        //see if we actually spawn one\n                        if (this.spawnChance < 1 && Math.random() >= this.spawnChance)\n                            continue;\n                        //create particle\n                        var p = void 0;\n                        if (this._poolFirst) {\n                            p = this._poolFirst;\n                            this._poolFirst = this._poolFirst.next;\n                            p.next = null;\n                        }\n                        else {\n                            p = new this.particleConstructor(this);\n                        }\n                        //set a random texture if we have more than one\n                        if (this.particleImages.length > 1) {\n                            p.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\n                        }\n                        else {\n                            //if they are actually the same texture, a standard particle\n                            //will quit early from the texture setting in setTexture().\n                            p.applyArt(this.particleImages[0]);\n                        }\n                        //set up the start and end values\n                        p.alphaList.reset(this.startAlpha);\n                        if (this.minimumSpeedMultiplier != 1) {\n                            p.speedMultiplier = Math.random() * (1 - this.minimumSpeedMultiplier) + this.minimumSpeedMultiplier;\n                        }\n                        p.speedList.reset(this.startSpeed);\n                        p.acceleration.x = this.acceleration.x;\n                        p.acceleration.y = this.acceleration.y;\n                        p.maxSpeed = this.maxSpeed;\n                        if (this.minimumScaleMultiplier != 1) {\n                            p.scaleMultiplier = Math.random() * (1 - this.minimumScaleMultiplier) + this.minimumScaleMultiplier;\n                        }\n                        p.scaleList.reset(this.startScale);\n                        p.colorList.reset(this.startColor);\n                        //randomize the rotation speed\n                        if (this.minRotationSpeed == this.maxRotationSpeed)\n                            p.rotationSpeed = this.minRotationSpeed;\n                        else\n                            p.rotationSpeed = Math.random() * (this.maxRotationSpeed - this.minRotationSpeed) + this.minRotationSpeed;\n                        p.noRotation = this.noRotation;\n                        //set up the lifetime\n                        p.maxLife = lifetime;\n                        //set the blend mode\n                        p.blendMode = this.particleBlendMode;\n                        //set the custom ease, if any\n                        p.ease = this.customEase;\n                        //set the extra data, if any\n                        p.extraData = this.extraData;\n                        //call the proper function to handle rotation and position of particle\n                        this._spawnFunc(p, emitPosX, emitPosY, i);\n                        //initialize particle\n                        p.init();\n                        //update the particle by the time passed, so the particles are spread out properly\n                        p.update(-this._spawnTimer); //we want a positive delta, because a negative delta messes things up\n                        //add the particle to the display list\n                        if (!p.parent) {\n                            if (this.addAtBack)\n                                this._parent.addChildAt(p, 0);\n                            else\n                                this._parent.addChild(p);\n                        }\n                        else {\n                            //kind of hacky, but performance friendly\n                            //shuffle children to correct place\n                            var children = this._parent.children;\n                            //avoid using splice if possible\n                            if (children[0] == p)\n                                children.shift();\n                            else if (children[children.length - 1] == p)\n                                children.pop();\n                            else {\n                                var index = children.indexOf(p);\n                                children.splice(index, 1);\n                            }\n                            if (this.addAtBack)\n                                children.unshift(p);\n                            else\n                                children.push(p);\n                        }\n                        //add particle to list of active particles\n                        if (this._activeParticlesLast) {\n                            this._activeParticlesLast.next = p;\n                            p.prev = this._activeParticlesLast;\n                            this._activeParticlesLast = p;\n                        }\n                        else {\n                            this._activeParticlesLast = this._activeParticlesFirst = p;\n                        }\n                        ++this.particleCount;\n                    }\n                }\n                //increase timer and continue on to any other particles that need to be created\n                this._spawnTimer += this._frequency;\n            }\n        }\n        //if the position changed before this update, then keep track of that\n        if (this._posChanged) {\n            this._prevEmitterPos.x = curX;\n            this._prevEmitterPos.y = curY;\n            this._prevPosIsValid = true;\n            this._posChanged = false;\n        }\n        //if we are all done and should destroy ourselves, take care of that\n        if (!this._emit && !this._activeParticlesFirst) {\n            if (this._completeCallback) {\n                this._completeCallback();\n            }\n            if (this._destroyWhenComplete) {\n                this.destroy();\n            }\n        }\n    };\n    /**\n     * Positions a particle for a point type emitter.\n     * @method PIXI.particles.Emitter#_spawnPoint\n     * @private\n     * @param {Particle} p The particle to position and rotate.\n     * @param {Number} emitPosX The emitter's x position\n     * @param {Number} emitPosY The emitter's y position\n     * @param {int} i The particle number in the current wave. Not used for this function.\n     */\n    Emitter.prototype._spawnPoint = function (p, emitPosX, emitPosY) {\n        //set the initial rotation/direction of the particle based on\n        //starting particle angle and rotation of emitter\n        if (this.minStartRotation == this.maxStartRotation)\n            p.rotation = this.minStartRotation + this.rotation;\n        else\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\n        //drop the particle at the emitter's position\n        p.position.x = emitPosX;\n        p.position.y = emitPosY;\n    };\n    /**\n     * Positions a particle for a rectangle type emitter.\n     * @method PIXI.particles.Emitter#_spawnRect\n     * @private\n     * @param {Particle} p The particle to position and rotate.\n     * @param {Number} emitPosX The emitter's x position\n     * @param {Number} emitPosY The emitter's y position\n     * @param {int} i The particle number in the current wave. Not used for this function.\n     */\n    Emitter.prototype._spawnRect = function (p, emitPosX, emitPosY) {\n        //set the initial rotation/direction of the particle based on starting\n        //particle angle and rotation of emitter\n        if (this.minStartRotation == this.maxStartRotation)\n            p.rotation = this.minStartRotation + this.rotation;\n        else\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\n        //place the particle at a random point in the rectangle\n        helperPoint.x = Math.random() * this.spawnRect.width + this.spawnRect.x;\n        helperPoint.y = Math.random() * this.spawnRect.height + this.spawnRect.y;\n        if (this.rotation !== 0)\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\n        p.position.x = emitPosX + helperPoint.x;\n        p.position.y = emitPosY + helperPoint.y;\n    };\n    /**\n     * Positions a particle for a circle type emitter.\n     * @method PIXI.particles.Emitter#_spawnCircle\n     * @private\n     * @param {Particle} p The particle to position and rotate.\n     * @param {Number} emitPosX The emitter's x position\n     * @param {Number} emitPosY The emitter's y position\n     * @param {int} i The particle number in the current wave. Not used for this function.\n     */\n    Emitter.prototype._spawnCircle = function (p, emitPosX, emitPosY) {\n        //set the initial rotation/direction of the particle based on starting\n        //particle angle and rotation of emitter\n        if (this.minStartRotation == this.maxStartRotation)\n            p.rotation = this.minStartRotation + this.rotation;\n        else\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n                this.minStartRotation + this.rotation;\n        //place the particle at a random radius in the circle\n        helperPoint.x = Math.random() * this.spawnCircle.radius;\n        helperPoint.y = 0;\n        //rotate the point to a random angle in the circle\n        ParticleUtils_1.default.rotatePoint(Math.random() * 360, helperPoint);\n        //offset by the circle's center\n        helperPoint.x += this.spawnCircle.x;\n        helperPoint.y += this.spawnCircle.y;\n        //rotate the point by the emitter's rotation\n        if (this.rotation !== 0)\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\n        //set the position, offset by the emitter's position\n        p.position.x = emitPosX + helperPoint.x;\n        p.position.y = emitPosY + helperPoint.y;\n    };\n    /**\n     * Positions a particle for a ring type emitter.\n     * @method PIXI.particles.Emitter#_spawnRing\n     * @private\n     * @param {Particle} p The particle to position and rotate.\n     * @param {Number} emitPosX The emitter's x position\n     * @param {Number} emitPosY The emitter's y position\n     * @param {int} i The particle number in the current wave. Not used for this function.\n     */\n    Emitter.prototype._spawnRing = function (p, emitPosX, emitPosY) {\n        var spawnCircle = this.spawnCircle;\n        //set the initial rotation/direction of the particle based on starting\n        //particle angle and rotation of emitter\n        if (this.minStartRotation == this.maxStartRotation)\n            p.rotation = this.minStartRotation + this.rotation;\n        else\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n                this.minStartRotation + this.rotation;\n        //place the particle at a random radius in the ring\n        if (spawnCircle.minRadius == spawnCircle.radius) {\n            helperPoint.x = Math.random() * (spawnCircle.radius - spawnCircle.minRadius) +\n                spawnCircle.minRadius;\n        }\n        else\n            helperPoint.x = spawnCircle.radius;\n        helperPoint.y = 0;\n        //rotate the point to a random angle in the circle\n        var angle = Math.random() * 360;\n        p.rotation += angle;\n        ParticleUtils_1.default.rotatePoint(angle, helperPoint);\n        //offset by the circle's center\n        helperPoint.x += this.spawnCircle.x;\n        helperPoint.y += this.spawnCircle.y;\n        //rotate the point by the emitter's rotation\n        if (this.rotation !== 0)\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\n        //set the position, offset by the emitter's position\n        p.position.x = emitPosX + helperPoint.x;\n        p.position.y = emitPosY + helperPoint.y;\n    };\n    /**\n     * Positions a particle for a burst type emitter.\n     * @method PIXI.particles.Emitter#_spawnBurst\n     * @private\n     * @param {Particle} p The particle to position and rotate.\n     * @param {Number} emitPosX The emitter's x position\n     * @param {Number} emitPosY The emitter's y position\n     * @param {int} i The particle number in the current wave.\n     */\n    Emitter.prototype._spawnBurst = function (p, emitPosX, emitPosY, i) {\n        //set the initial rotation/direction of the particle based on spawn\n        //angle and rotation of emitter\n        if (this.particleSpacing === 0)\n            p.rotation = Math.random() * 360;\n        else\n            p.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\n        //drop the particle at the emitter's position\n        p.position.x = emitPosX;\n        p.position.y = emitPosY;\n    };\n    /**\n     * Kills all active particles immediately.\n     * @method PIXI.particles.Emitter#cleanup\n     */\n    Emitter.prototype.cleanup = function () {\n        var particle, next;\n        for (particle = this._activeParticlesFirst; particle; particle = next) {\n            next = particle.next;\n            this.recycle(particle);\n            if (particle.parent)\n                particle.parent.removeChild(particle);\n        }\n        this._activeParticlesFirst = this._activeParticlesLast = null;\n        this.particleCount = 0;\n    };\n    /**\n     * Destroys the emitter and all of its particles.\n     * @method PIXI.particles.Emitter#destroy\n     */\n    Emitter.prototype.destroy = function () {\n        //make sure we aren't still listening to any tickers\n        this.autoUpdate = false;\n        //puts all active particles in the pool, and removes them from the particle parent\n        this.cleanup();\n        //wipe the pool clean\n        var next;\n        for (var particle = this._poolFirst; particle; particle = next) {\n            //store next value so we don't lose it in our destroy call\n            next = particle.next;\n            particle.destroy();\n        }\n        this._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos =\n            this.startColor = this.startScale = this.startAlpha = this.startSpeed =\n                this.customEase = this._completeCallback = null;\n    };\n    return Emitter;\n}());\nexports.default = Emitter;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\nvar PropertyList_1 = require(\"./PropertyList\");\nvar Sprite = PIXI.Sprite;\n/**\n * An individual particle image. You shouldn't have to deal with these.\n * @memberof PIXI.particles\n * @class Particle\n * @extends PIXI.Sprite\n * @constructor\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\n */\nvar Particle = /** @class */ (function (_super) {\n    __extends(Particle, _super);\n    function Particle(emitter) {\n        var _this = \n        //start off the sprite with a blank texture, since we are going to replace it\n        //later when the particle is initialized.\n        _super.call(this) || this;\n        _this.emitter = emitter;\n        //particles should be centered\n        _this.anchor.x = _this.anchor.y = 0.5;\n        _this.velocity = new PIXI.Point();\n        _this.maxLife = 0;\n        _this.age = 0;\n        _this.ease = null;\n        _this.extraData = null;\n        _this.alphaList = new PropertyList_1.default();\n        _this.speedList = new PropertyList_1.default();\n        _this.speedMultiplier = 1;\n        /**\n         * Acceleration to apply to the particle.\n         * @property {PIXI.Point} accleration\n         */\n        _this.acceleration = new PIXI.Point();\n        /**\n         * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\n         * will disable the maximum speed.\n         * @property {Number} maxSpeed\n         * @default NaN\n         */\n        _this.maxSpeed = NaN;\n        /**\n         * The scale of the particle throughout its life.\n         * @property {PIXI.particles.PropertyList} scaleList\n         */\n        _this.scaleList = new PropertyList_1.default();\n        /**\n         * A multiplier from 0-1 applied to the scale of the particle at all times.\n         * @property {number} scaleMultiplier\n         */\n        _this.scaleMultiplier = 1;\n        /**\n         * The tint of the particle throughout its life.\n         * @property {PIXI.particles.PropertyList} colorList\n         */\n        _this.colorList = new PropertyList_1.default(true);\n        /**\n         * If alpha should be interpolated at all.\n         * @property {Boolean} _doAlpha\n         * @private\n         */\n        _this._doAlpha = false;\n        /**\n         * If scale should be interpolated at all.\n         * @property {Boolean} _doScale\n         * @private\n         */\n        _this._doScale = false;\n        /**\n         * If speed should be interpolated at all.\n         * @property {Boolean} _doSpeed\n         * @private\n         */\n        _this._doSpeed = false;\n        /**\n         * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\n         * and _doSpeed gets priority.\n         * @property {Boolean} _doAcceleration\n         * @private\n         */\n        _this._doAcceleration = false;\n        /**\n         * If color should be interpolated at all.\n         * @property {Boolean} _doColor\n         * @private\n         */\n        _this._doColor = false;\n        /**\n         * If normal movement should be handled. Subclasses wishing to override movement\n         * can set this to false in init().\n         * @property {Boolean} _doNormalMovement\n         * @private\n         */\n        _this._doNormalMovement = false;\n        /**\n         * One divided by the max life of the particle, saved for slightly faster math.\n         * @property {Number} _oneOverLife\n         * @private\n         */\n        _this._oneOverLife = 0;\n        /**\n         * Reference to the next particle in the list.\n         * @property {Particle} next\n         * @private\n         */\n        _this.next = null;\n        /**\n         * Reference to the previous particle in the list.\n         * @property {Particle} prev\n         * @private\n         */\n        _this.prev = null;\n        //save often used functions on the instance instead of the prototype for better speed\n        _this.init = _this.init;\n        _this.Particle_init = Particle.prototype.init;\n        _this.update = _this.update;\n        _this.Particle_update = Particle.prototype.update;\n        _this.Sprite_destroy = _super.prototype.destroy;\n        _this.Particle_destroy = Particle.prototype.destroy;\n        _this.applyArt = _this.applyArt;\n        _this.kill = _this.kill;\n        return _this;\n    }\n    /**\n     * Initializes the particle for use, based on the properties that have to\n     * have been set already on the particle.\n     * @method PIXI.particles.Particle#init\n     */\n    Particle.prototype.init = function () {\n        //reset the age\n        this.age = 0;\n        //set up the velocity based on the start speed and rotation\n        this.velocity.x = this.speedList.current.value * this.speedMultiplier;\n        this.velocity.y = 0;\n        ParticleUtils_1.default.rotatePoint(this.rotation, this.velocity);\n        if (this.noRotation) {\n            this.rotation = 0;\n        }\n        else {\n            //convert rotation to Radians from Degrees\n            this.rotation *= ParticleUtils_1.default.DEG_TO_RADS;\n        }\n        //convert rotation speed to Radians from Degrees\n        this.rotationSpeed *= ParticleUtils_1.default.DEG_TO_RADS;\n        //set alpha to inital alpha\n        this.alpha = this.alphaList.current.value;\n        //set scale to initial scale\n        this.scale.x = this.scale.y = this.scaleList.current.value;\n        //figure out what we need to interpolate\n        this._doAlpha = !!this.alphaList.current.next;\n        this._doSpeed = !!this.speedList.current.next;\n        this._doScale = !!this.scaleList.current.next;\n        this._doColor = !!this.colorList.current.next;\n        this._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\n        //_doNormalMovement can be cancelled by subclasses\n        this._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\n        //save our lerp helper\n        this._oneOverLife = 1 / this.maxLife;\n        //set the inital color\n        var color = this.colorList.current.value;\n        this.tint = ParticleUtils_1.default.combineRGBComponents(color.r, color.g, color.b);\n        //ensure visibility\n        this.visible = true;\n    };\n    /**\n     * Sets the texture for the particle. This can be overridden to allow\n     * for an animated particle.\n     * @method PIXI.particles.Particle#applyArt\n     * @param {PIXI.Texture} art The texture to set.\n     */\n    Particle.prototype.applyArt = function (art) {\n        this.texture = art || PIXI.Texture.EMPTY;\n    };\n    /**\n     * Updates the particle.\n     * @method PIXI.particles.Particle#update\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\n     * @return {Number} The standard interpolation multiplier (0-1) used for all relevant particle\n     *                   properties. A value of -1 means the particle died of old age instead.\n     */\n    Particle.prototype.update = function (delta) {\n        //increase age\n        this.age += delta;\n        //recycle particle if it is too old\n        if (this.age >= this.maxLife) {\n            this.kill();\n            return -1;\n        }\n        //determine our interpolation value\n        var lerp = this.age * this._oneOverLife; //lifetime / maxLife;\n        if (this.ease) {\n            if (this.ease.length == 4) {\n                //the t, b, c, d parameters that some tween libraries use\n                //(time, initial value, end value, duration)\n                lerp = this.ease(lerp, 0, 1, 1);\n            }\n            else {\n                //the simplified version that we like that takes\n                //one parameter, time from 0-1. TweenJS eases provide this usage.\n                lerp = this.ease(lerp);\n            }\n        }\n        //interpolate alpha\n        if (this._doAlpha)\n            this.alpha = this.alphaList.interpolate(lerp);\n        //interpolate scale\n        if (this._doScale) {\n            var scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\n            this.scale.x = this.scale.y = scale;\n        }\n        //handle movement\n        if (this._doNormalMovement) {\n            //interpolate speed\n            if (this._doSpeed) {\n                var speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n                ParticleUtils_1.default.normalize(this.velocity);\n                ParticleUtils_1.default.scaleBy(this.velocity, speed);\n            }\n            else if (this._doAcceleration) {\n                this.velocity.x += this.acceleration.x * delta;\n                this.velocity.y += this.acceleration.y * delta;\n                if (this.maxSpeed) {\n                    var currentSpeed = ParticleUtils_1.default.length(this.velocity);\n                    //if we are going faster than we should, clamp at the max speed\n                    //DO NOT recalculate vector length\n                    if (currentSpeed > this.maxSpeed) {\n                        ParticleUtils_1.default.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\n                    }\n                }\n            }\n            //adjust position based on velocity\n            this.position.x += this.velocity.x * delta;\n            this.position.y += this.velocity.y * delta;\n        }\n        //interpolate color\n        if (this._doColor) {\n            this.tint = this.colorList.interpolate(lerp);\n        }\n        //update rotation\n        if (this.rotationSpeed !== 0) {\n            this.rotation += this.rotationSpeed * delta;\n        }\n        else if (this.acceleration && !this.noRotation) {\n            this.rotation = Math.atan2(this.velocity.y, this.velocity.x); // + Math.PI / 2;\n        }\n        return lerp;\n    };\n    /**\n     * Kills the particle, removing it from the display list\n     * and telling the emitter to recycle it.\n     * @method PIXI.particles.Particle#kill\n     */\n    Particle.prototype.kill = function () {\n        this.emitter.recycle(this);\n    };\n    /**\n     * Destroys the particle, removing references and preventing future use.\n     * @method PIXI.particles.Particle#destroy\n     */\n    Particle.prototype.destroy = function () {\n        if (this.parent)\n            this.parent.removeChild(this);\n        this.Sprite_destroy();\n        this.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList =\n            this.speedList = this.ease = this.next = this.prev = null;\n    };\n    /**\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\n     * modifications to prepare it ahead of time.\n     * @method PIXI.particles.Particle.parseArt\n     * @static\n     * @param  {Array} art The array of art data. For Particle, it should be an array of Textures.\n     *                     Any strings in the array will be converted to Textures via\n     *                     Texture.fromImage().\n     * @return {Array} The art, after any needed modifications.\n     */\n    Particle.parseArt = function (art) {\n        //convert any strings to Textures.\n        var i;\n        for (i = art.length; i >= 0; --i) {\n            if (typeof art[i] == \"string\")\n                art[i] = PIXI.Texture.fromImage(art[i]);\n        }\n        //particles from different base textures will be slower in WebGL than if they\n        //were from one spritesheet\n        if (ParticleUtils_1.default.verbose) {\n            for (i = art.length - 1; i > 0; --i) {\n                if (art[i].baseTexture != art[i - 1].baseTexture) {\n                    if (window.console)\n                        console.warn(\"PixiParticles: using particle textures from different images may hinder performance in WebGL\");\n                    break;\n                }\n            }\n        }\n        return art;\n    };\n    /**\n     * Parses extra emitter data to ensure it is set up for this particle class.\n     * Particle does nothing to the extra data.\n     * @method PIXI.particles.Particle.parseData\n     * @static\n     * @param  {Object} extraData The extra data from the particle config.\n     * @return {Object} The parsed extra data.\n     */\n    Particle.parseData = function (extraData) {\n        return extraData;\n    };\n    return Particle;\n}(Sprite));\nexports.default = Particle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BLEND_MODES = PIXI.BLEND_MODES;\nvar PropertyNode_1 = require(\"./PropertyNode\");\n/**\n * Contains helper functions for particles and emitters to use.\n * @memberof PIXI.particles\n * @class ParticleUtils\n * @static\n */\nvar ParticleUtils = {\n    /**\n     * If errors and warnings should be logged within the library.\n     * @name PIXI.particles.ParticleUtils.verbose\n     * @default false\n     * @static\n     */\n    verbose: false,\n    DEG_TO_RADS: Math.PI / 180,\n    /**\n     * Rotates a point by a given angle.\n     * @method PIXI.particles.ParticleUtils.rotatePoint\n     * @param {Number} angle The angle to rotate by in degrees\n     * @param {PIXI.Point} p The point to rotate around 0,0.\n     * @static\n     */\n    rotatePoint: function (angle, p) {\n        if (!angle)\n            return;\n        angle *= ParticleUtils.DEG_TO_RADS;\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        var xnew = p.x * c - p.y * s;\n        var ynew = p.x * s + p.y * c;\n        p.x = xnew;\n        p.y = ynew;\n    },\n    /**\n     * Combines separate color components (0-255) into a single uint color.\n     * @method PIXI.particles.ParticleUtils.combineRGBComponents\n     * @param {uint} r The red value of the color\n     * @param {uint} g The green value of the color\n     * @param {uint} b The blue value of the color\n     * @return {uint} The color in the form of 0xRRGGBB\n     * @static\n     */\n    combineRGBComponents: function (r, g, b /*, a*/) {\n        return /*a << 24 |*/ r << 16 | g << 8 | b;\n    },\n    /**\n     * Reduces the point to a length of 1.\n     * @method PIXI.particles.ParticleUtils.normalize\n     * @static\n     * @param {PIXI.Point} point The point to normalize\n     */\n    normalize: function (point) {\n        var oneOverLen = 1 / ParticleUtils.length(point);\n        point.x *= oneOverLen;\n        point.y *= oneOverLen;\n    },\n    /**\n     * Multiplies the x and y values of this point by a value.\n     * @method PIXI.particles.ParticleUtils.scaleBy\n     * @static\n     * @param {PIXI.Point} point The point to scaleBy\n     * @param {number} value The value to scale by.\n     */\n    scaleBy: function (point, value) {\n        point.x *= value;\n        point.y *= value;\n    },\n    /**\n     * Returns the length (or magnitude) of this point.\n     * @method PIXI.particles.ParticleUtils.length\n     * @static\n     * @param {PIXI.Point} point The point to measure length\n     * @return The length of this point.\n     */\n    length: function (point) {\n        return Math.sqrt(point.x * point.x + point.y * point.y);\n    },\n    /**\n     * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\n     * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\n     * {r, g, b, (a)}.\n     * @method PIXI.particles.ParticleUtils.hexToRGB\n     * @param {string} color The input color string.\n     * @param {Object} [output] An object to put the output in. If omitted, a new object is created.\n     * @return The object with r, g, and b properties, possibly with an a property.\n     * @static\n     */\n    hexToRGB: function (color, output) {\n        if (!output)\n            output = {};\n        if (color.charAt(0) == \"#\")\n            color = color.substr(1);\n        else if (color.indexOf(\"0x\") === 0)\n            color = color.substr(2);\n        var alpha;\n        if (color.length == 8) {\n            alpha = color.substr(0, 2);\n            color = color.substr(2);\n        }\n        output.r = parseInt(color.substr(0, 2), 16); //Red\n        output.g = parseInt(color.substr(2, 2), 16); //Green\n        output.b = parseInt(color.substr(4, 2), 16); //Blue\n        if (alpha)\n            output.a = parseInt(alpha, 16);\n        return output;\n    },\n    /**\n     * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\n     * by the related tool at http://www.greensock.com/customease/.\n     * @method PIXI.particles.ParticleUtils.generateEase\n     * @param {Array} segments An array of segments, as created by\n     * http://www.greensock.com/customease/.\n     * @return {Function} A function that calculates the percentage of change at\n     *                    a given point in time (0-1 inclusive).\n     * @static\n     */\n    generateEase: function (segments) {\n        var qty = segments.length;\n        var oneOverQty = 1 / qty;\n        /*\n         * Calculates the percentage of change at a given point in time (0-1 inclusive).\n         * @param {Number} time The time of the ease, 0-1 inclusive.\n         * @return {Number} The percentage of the change, 0-1 inclusive (unless your\n         *                  ease goes outside those bounds).\n         */\n        return function (time) {\n            var t, s;\n            var i = (qty * time) | 0; //do a quick floor operation\n            t = (time - (i * oneOverQty)) * qty;\n            s = segments[i] || segments[qty - 1];\n            return (s.s + t * (2 * (1 - t) * (s.cp - s.s) + t * (s.e - s.s)));\n        };\n    },\n    /**\n     * Gets a blend mode, ensuring that it is valid.\n     * @method PIXI.particles.ParticleUtils.getBlendMode\n     * @param {string} name The name of the blend mode to get.\n     * @return {int} The blend mode as specified in the PIXI.BLEND_MODES enumeration.\n     * @static\n     */\n    getBlendMode: function (name) {\n        if (!name)\n            return BLEND_MODES.NORMAL;\n        name = name.toUpperCase();\n        while (name.indexOf(\" \") >= 0)\n            name = name.replace(\" \", \"_\");\n        return BLEND_MODES[name] || BLEND_MODES.NORMAL;\n    },\n    /**\n     * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\n     * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\n     * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\n     * @method PIXI.particles.ParticleUtils.createSteppedGradient\n     * @param {Array} list The list of data to convert.\n     * @param {number} [numSteps=10] The number of steps to use.\n     * @return {PIXI.particles.PropertyNode} The blend mode as specified in the PIXI.blendModes enumeration.\n     * @static\n     */\n    createSteppedGradient: function (list, numSteps) {\n        if (numSteps === void 0) { numSteps = 10; }\n        if (typeof numSteps !== 'number' || numSteps <= 0)\n            numSteps = 10;\n        var first = new PropertyNode_1.default(list[0].value, list[0].time);\n        first.isStepped = true;\n        var currentNode = first;\n        var current = list[0];\n        var nextIndex = 1;\n        var next = list[nextIndex];\n        for (var i = 1; i < numSteps; ++i) {\n            var lerp = i / numSteps;\n            //ensure we are on the right segment, if multiple\n            while (lerp > next.time) {\n                current = next;\n                next = list[++nextIndex];\n            }\n            //convert the lerp value to the segment range\n            lerp = (lerp - current.time) / (next.time - current.time);\n            var curVal = ParticleUtils.hexToRGB(current.value);\n            var nextVal = ParticleUtils.hexToRGB(next.value);\n            var output = {};\n            output.r = (nextVal.r - curVal.r) * lerp + curVal.r;\n            output.g = (nextVal.g - curVal.g) * lerp + curVal.g;\n            output.b = (nextVal.b - curVal.b) * lerp + curVal.b;\n            currentNode.next = new PropertyNode_1.default(output, i / numSteps);\n            currentNode = currentNode.next;\n        }\n        //we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\n        //the particle has died of old age\n        return first;\n    }\n};\nexports.default = ParticleUtils;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\nvar Particle_1 = require(\"./Particle\");\n/**\n * A helper point for math things.\n * @private\n */\nvar helperPoint = new PIXI.Point();\n//a hand picked list of Math functions (and a couple properties) that are allowable.\n//they should be used without the preceding \"Math.\"\nvar MATH_FUNCS = [\n    \"pow\",\n    \"sqrt\",\n    \"abs\",\n    \"floor\",\n    \"round\",\n    \"ceil\",\n    \"E\",\n    \"PI\",\n    \"sin\",\n    \"cos\",\n    \"tan\",\n    \"asin\",\n    \"acos\",\n    \"atan\",\n    \"atan2\",\n    \"log\"\n];\n//create an actual regular expression object from the string\nvar WHITELISTER = new RegExp([\n    //Allow the 4 basic operations, parentheses and all numbers/decimals, as well\n    //as 'x', for the variable usage.\n    \"[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]\",\n].concat(MATH_FUNCS).join(\"|\"), \"g\");\n/**\n * Parses a string into a function for path following.\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\n * names, and using `new Function()` to generate a function.\n * @method PIXI.particles.PathParticle~parsePath\n * @private\n * @static\n * @param {String} pathString The string to parse.\n * @return {Function} The path function - takes x, outputs y.\n */\nvar parsePath = function (pathString) {\n    var matches = pathString.match(WHITELISTER);\n    for (var i = matches.length - 1; i >= 0; --i) {\n        if (MATH_FUNCS.indexOf(matches[i]) >= 0)\n            matches[i] = \"Math.\" + matches[i];\n    }\n    pathString = matches.join(\"\");\n    return new Function(\"x\", \"return \" + pathString + \";\");\n};\n/**\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\n * \"5x + 3\".\n * To use this class, the particle config must have a \"path\" string in the\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\n * speed settings of the particle). It may have numbers, parentheses, the four basic\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\n * \"acos\", \"atan\", \"atan2\", \"log\".\n * The overall movement of the particle and the expression value become x and y positions for\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\n * the particle.\n *\n * Some example paths:\n *\n * \t\"sin(x/10) * 20\" // A sine wave path.\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\n *\n * @memberof PIXI.particles\n * @class PathParticle\n * @extends PIXI.particles.Particle\n * @constructor\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\n */\nvar PathParticle = /** @class */ (function (_super) {\n    __extends(PathParticle, _super);\n    function PathParticle(emitter) {\n        var _this = _super.call(this, emitter) || this;\n        _this.path = null;\n        _this.initialRotation = 0;\n        _this.initialPosition = new PIXI.Point();\n        _this.movement = 0;\n        return _this;\n    }\n    /**\n     * Initializes the particle for use, based on the properties that have to\n     * have been set already on the particle.\n     * @method PIXI.particles.PathParticle#init\n     */\n    PathParticle.prototype.init = function () {\n        //get initial rotation before it is converted to radians\n        this.initialRotation = this.rotation;\n        //standard init\n        this.Particle_init();\n        //set the path for the particle\n        this.path = this.extraData.path;\n        //cancel the normal movement behavior\n        this._doNormalMovement = !this.path;\n        //reset movement\n        this.movement = 0;\n        //grab position\n        this.initialPosition.x = this.position.x;\n        this.initialPosition.y = this.position.y;\n    };\n    /**\n     * Updates the particle.\n     * @method PIXI.particles.PathParticle#update\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\n     */\n    PathParticle.prototype.update = function (delta) {\n        var lerp = this.Particle_update(delta);\n        //if the particle died during the update, then don't bother\n        if (lerp >= 0 && this.path) {\n            //increase linear movement based on speed\n            var speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n            this.movement += speed * delta;\n            //set up the helper point for rotation\n            helperPoint.x = this.movement;\n            helperPoint.y = this.path(this.movement);\n            ParticleUtils_1.default.rotatePoint(this.initialRotation, helperPoint);\n            this.position.x = this.initialPosition.x + helperPoint.x;\n            this.position.y = this.initialPosition.y + helperPoint.y;\n        }\n        return lerp;\n    };\n    /**\n     * Destroys the particle, removing references and preventing future use.\n     * @method PIXI.particles.PathParticle#destroy\n     */\n    PathParticle.prototype.destroy = function () {\n        this.Particle_destroy();\n        this.path = this.initialPosition = null;\n    };\n    /**\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\n     * modifications to prepare it ahead of time. This just runs Particle.parseArt().\n     * @method PIXI.particles.PathParticle.parseArt\n     * @static\n     * @param  {Array} art The array of art data. For Particle, it should be an array of Textures.\n     *                     Any strings in the array will be converted to Textures via\n     *                     Texture.fromImage().\n     * @return {Array} The art, after any needed modifications.\n     */\n    PathParticle.parseArt = function (art) {\n        return Particle_1.default.parseArt(art);\n    };\n    /**\n     * Parses extra emitter data to ensure it is set up for this particle class.\n     * PathParticle checks for the existence of path data, and parses the path data for use\n     * by particle instances.\n     * @method PIXI.particles.PathParticle.parseData\n     * @static\n     * @param  {Object} extraData The extra data from the particle config.\n     * @return {Object} The parsed extra data.\n     */\n    PathParticle.parseData = function (extraData) {\n        var output = {};\n        if (extraData && extraData.path) {\n            try {\n                output.path = parsePath(extraData.path);\n            }\n            catch (e) {\n                if (ParticleUtils_1.default.verbose)\n                    console.error(\"PathParticle: error in parsing path expression\");\n                output.path = null;\n            }\n        }\n        else {\n            if (ParticleUtils_1.default.verbose)\n                console.error(\"PathParticle requires a path string in extraData!\");\n            output.path = null;\n        }\n        return output;\n    };\n    return PathParticle;\n}(Particle_1.default));\nexports.default = PathParticle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\n/**\n * Singly linked list container for keeping track of interpolated properties for particles.\n * Each Particle will have one of these for each interpolated property.\n * @memberof PIXI.particles\n * @class PropertyList\n * @constructor\n * @param {boolean} isColor If this list handles color values\n */\nvar PropertyList = /** @class */ (function () {\n    function PropertyList(isColor) {\n        if (isColor === void 0) { isColor = false; }\n        this.current = null;\n        this.next = null;\n        this.isColor = !!isColor;\n        this.interpolate = null;\n        this.ease = null;\n    }\n    /**\n     * Resets the list for use.\n     * @method interpolate\n     * @param {PIXI.particles.PropertyNode} first The first node in the list.\n     * @param {boolean} [isStepped=false] If the values should be stepped instead of interpolated linearly.\n     */\n    PropertyList.prototype.reset = function (first) {\n        this.current = first;\n        this.next = first.next;\n        randomize(this.current);\n        randomize(this.next);\n        var isSimple = this.next && this.next.time >= 1;\n        if (isSimple) {\n            this.interpolate = this.isColor ? intColorSimple : intValueSimple;\n        }\n        else if (first.isStepped) {\n            this.interpolate = this.isColor ? intColorStepped : intValueStepped;\n        }\n        else {\n            this.interpolate = this.isColor ? intColorComplex : intValueComplex;\n        }\n        this.ease = this.current.ease;\n    };\n    return PropertyList;\n}());\nexports.default = PropertyList;\nfunction randomize(node) {\n    if (node.arrayValue) {\n        node.value = node.arrayValue[~~(Math.random() * node.arrayValue.length)];\n    }\n}\nfunction intValueSimple(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    return (this.next.value - this.current.value) * lerp + this.current.value;\n}\nfunction intColorSimple(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    var curVal = this.current.value, nextVal = this.next.value;\n    var r = (nextVal.r - curVal.r) * lerp + curVal.r;\n    var g = (nextVal.g - curVal.g) * lerp + curVal.g;\n    var b = (nextVal.b - curVal.b) * lerp + curVal.b;\n    return ParticleUtils_1.default.combineRGBComponents(r, g, b);\n}\nfunction intValueComplex(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    //make sure we are on the right segment\n    while (lerp > this.next.time) {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    //convert the lerp value to the segment range\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n    return (this.next.value - this.current.value) * lerp + this.current.value;\n}\nfunction intColorComplex(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    //make sure we are on the right segment\n    while (lerp > this.next.time) {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    //convert the lerp value to the segment range\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n    var curVal = this.current.value, nextVal = this.next.value;\n    var r = (nextVal.r - curVal.r) * lerp + curVal.r;\n    var g = (nextVal.g - curVal.g) * lerp + curVal.g;\n    var b = (nextVal.b - curVal.b) * lerp + curVal.b;\n    return ParticleUtils_1.default.combineRGBComponents(r, g, b);\n}\nfunction intValueStepped(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    //make sure we are on the right segment\n    while (this.next && lerp > this.next.time) {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    return this.current.value;\n}\nfunction intColorStepped(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    //make sure we are on the right segment\n    while (this.next && lerp > this.next.time) {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    var curVal = this.current.value;\n    return ParticleUtils_1.default.combineRGBComponents(curVal.r, curVal.g, curVal.b);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\n/**\n * A single node in a PropertyList.\n * @memberof PIXI.particles\n * @class PropertyNode\n * @constructor\n * @param {number|string} value The value for this node\n * @param {number} time The time for this node, between 0-1\n * @param {Function|Array} [ease] Custom ease for this list. Only relevant for the first node.\n */\nvar PropertyNode = /** @class */ (function () {\n    function PropertyNode(value, time, ease) {\n        if (Array.isArray(value)) {\n            this.arrayValue = value.map(function (v) {\n                return typeof v == \"string\" ? ParticleUtils_1.default.hexToRGB(v) : v;\n            });\n            this.value = this.arrayValue[0];\n        }\n        else {\n            this.value = typeof value == \"string\" ? ParticleUtils_1.default.hexToRGB(value) : value;\n            this.arrayValue = null;\n        }\n        this.time = time;\n        this.next = null;\n        this.isStepped = false;\n        if (ease) {\n            this.ease = typeof ease == \"function\" ? ease : ParticleUtils_1.default.generateEase(ease);\n        }\n        else {\n            this.ease = null;\n        }\n    }\n    /**\n     * Creates a list of property values from a data object {list, isStepped} with a list of objects in\n     * the form {value, time}. Alternatively, the data object can be in the deprecated form of\n     * {start, end}.\n     * @method PIXI.particles.PropertyNode.createListFromArray\n     * @static\n     * @param  {Object} data The data for the list.\n     * @param  {Array} data.list The array of value and time objects.\n     * @param  {boolean} [data.isStepped] If the list is stepped rather than interpolated.\n     * @param  {Function|Array} [data.ease] Custom ease for this list.\n     * @return {PIXI.particles.PropertyNode} The first node in the list\n     */\n    PropertyNode.createList = function (data) {\n        if (Array.isArray(data.list)) {\n            var array = data.list;\n            var node = void 0, first = void 0;\n            first = node = new PropertyNode(array[0].value, array[0].time, data.ease);\n            //only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\n            if (array.length > 2 || (array.length === 2 && array[1].value !== array[0].value)) {\n                for (var i = 1; i < array.length; ++i) {\n                    node.next = new PropertyNode(array[i].value, array[i].time);\n                    node = node.next;\n                }\n            }\n            first.isStepped = !!data.isStepped;\n            return first;\n        }\n        else {\n            //Handle deprecated version here\n            var start = new PropertyNode(data.start, 0);\n            //only set up a next value if it is different from the starting value\n            if (data.end !== data.start)\n                start.next = new PropertyNode(data.end, 1);\n            return start;\n        }\n    };\n    return PropertyNode;\n}());\nexports.default = PropertyNode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_js_1 = require(\"./ParticleUtils.js\");\nexports.ParticleUtils = ParticleUtils_js_1.default;\nvar Particle_js_1 = require(\"./Particle.js\");\nexports.Particle = Particle_js_1.default;\nvar Emitter_js_1 = require(\"./Emitter.js\");\nexports.Emitter = Emitter_js_1.default;\nvar PathParticle_js_1 = require(\"./PathParticle.js\");\nexports.PathParticle = PathParticle_js_1.default;\nvar AnimatedParticle_js_1 = require(\"./AnimatedParticle.js\");\nexports.AnimatedParticle = AnimatedParticle_js_1.default;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// If we're in the browser make sure PIXI is available\nif (typeof PIXI === 'undefined') {\n    throw \"pixi-particles requires pixi.js to be loaded first\";\n}\n//ensure that the particles namespace exist - PIXI 4 creates it itself, PIXI 3 does not\nif (!PIXI.particles) {\n    PIXI.particles = {};\n}\n// get the library itself\nvar particles = require(\"./particles\");\n// insert the library into the particles namespace on PIXI\nfor (var prop in particles) {\n    PIXI.particles[prop] = particles[prop];\n}\n"],"sourceRoot":"."}